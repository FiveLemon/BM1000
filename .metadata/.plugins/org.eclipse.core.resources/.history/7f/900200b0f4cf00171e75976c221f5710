/*************************************************************************
	> File Name: process_ctrl.c
	> Author: 
	> Mail: 
	> Created Time: Sat 08 Jul 2017 09:35:56 AM CST
 ************************************************************************/


#include "sw/drivers/drvic/process_ctrl.h"


const float DE5_Board_Bias[6]={0.9856581092, 0.9845710397, 0.9823322296, 0.3482521176, 0.3484361768, 0.3485003114 };


PROCTRL_Handle PROCTRL_init(void *pMemory,const size_t numBytes)
{

   PROCTRL_Handle handle;
   
   if(numBytes < sizeof(PROCTRL_Obj))
     return ((PROCTRL_Handle)NULL);

   handle = (PROCTRL_Handle)pMemory;

   PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

   // Initialize Flying Start (FS)
   obj->fsHandle = FS_init(&(obj->fs),sizeof(obj->fs));

   // Initialize Modbus module
   obj->modbusHandle = MB_init(&(obj->My_ModBus), sizeof(obj->My_ModBus));

   obj->motorHandle = Motor_init(&(obj->MotorVars), sizeof(obj->MotorVars));

   obj->fsmHandle =  FSM_init(&(obj->MyFSM), sizeof(obj->MyFSM));

#ifdef USE_SpinTAC

   // initialize the ENC module
   obj->encHandle = ENC_init(&obj->enc, sizeof(obj->enc));
   // initialize the SLIP module
   obj->slipHandle = SLIP_init(&obj->slip, sizeof(obj->slip));
   // initialize the SpinTAC Components
   obj->stHandle = ST_init(&obj->st_obj, sizeof(obj->st_obj));
#endif

   obj->Ext_Int_Flag = false;
   obj->PwmData.Tabc.value[0] = _IQ(0.0);
   obj->PwmData.Tabc.value[1] = _IQ(0.0);
   obj->PwmData.Tabc.value[2] = _IQ(0.0);


   return (handle);

}

void PROCTRL_setHalHandle(PROCTRL_Handle handle, HAL_Handle halHandle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  obj->halHandle = halHandle;

  return;
}


void PROCTRL_setCtrlHandle(PROCTRL_Handle handle, CTRL_Handle ctrlHandle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  obj->ctrlHandle = ctrlHandle;

  return;
}

void PROCTRL_setUserParams(PROCTRL_Handle handle, pUSER_Params pUserParams)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  obj->pUserParams = pUserParams;

  return;
}

void PROCTRL_setMotorHandle(PROCTRL_Handle handle, MOTOR_Handle motorHandle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  obj->motorHandle = motorHandle;

  return;
}


#ifdef USE_SpinTAC

void PROCTRL_setupSpinTAC(PROCTRL_Handle handle)
{
   PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
   // setup the ENC module
   ENC_setup(obj->encHandle, 1, obj->pUserParams->motor_numPolePairs , USER_MOTOR_ENCODER_LINES, 0, USER_IQ_FULL_SCALE_FREQ_Hz, USER_ISR_FREQ_Hz, 8000.0);

   // setup the SLIP module
   SLIP_setup(obj->slipHandle, _IQ(obj->pUserParams->ctrlPeriod_sec));

}
#endif


void PROCTRL_setupFlyingStart(PROCTRL_Handle handle)
{

  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // Disable Flying Start (FS)
  FS_setFlag_enableFs(obj->fsHandle, false);

  // Clear Flying Start(FS) check time count
  FS_clearCntCheckTime(obj->fsHandle);

  // Set Flying Start(FS) minimum transition speed
  FS_setSpeedFsMin_krpm(obj->fsHandle, obj->ctrlHandle, FS_SPEED_MIN);

  // set Flying Start(FS) maximum check time
  FS_setMaxCheckTime(obj->fsHandle, FS_MAX_CHECK_TIME);

  return;
}

void PROCTRL_setupModbus(PROCTRL_Handle handle)
{
   PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

   MB_setSciHandle(obj->modbusHandle, obj->halHandle->sciHandle);
   MB_setTimHandle(obj->modbusHandle, obj->halHandle->timerHandle[1]);
   MB_setGpioHandle(obj->modbusHandle, obj->halHandle->gpioHandle);
   MB_setMotorHandle(obj->modbusHandle, obj->motorHandle);
   MB_setFsmHandle(obj->modbusHandle, obj->fsmHandle);

   return;
}

void PROCTRL_setupMotors(PROCTRL_Handle handle)
{
   PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

   MOTOR_MotorVars_Init(obj->motorHandle);

   return;
}

void PROCTRL_setupFSM(PROCTRL_Handle handle)
{
   PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

   FSM_setMotorHandle(obj->fsmHandle, obj->motorHandle);
   FSM_setHalHandle(obj->fsmHandle, obj->halHandle);

#ifdef USE_SpinTAC
   FSM_setStHandle(obj->fsmHandle, obj->stHandle);
#endif

  return;
}



void recalcKpKi(CTRL_Handle handle, USER_Params *pUserParams)
{
  CTRL_Obj *obj = (CTRL_Obj *)handle;
  EST_State_e EstState = EST_getState(obj->estHandle);

  if((EST_isMotorIdentified(obj->estHandle) == false) && (EstState == EST_State_Rs))
    {
      float_t Lhf = CTRL_getLhf(handle);
      float_t Rhf = CTRL_getRhf(handle);
      float_t RhfoverLhf = Rhf/Lhf;
      _iq Kp = _IQ(0.25*Lhf*(pUserParams->iqFullScaleCurrent_A)/(USER_CTRL_PERIOD_sec*(pUserParams->iqFullScaleVoltage_V)));
      _iq Ki = _IQ(RhfoverLhf*USER_CTRL_PERIOD_sec);

      // set Rhf/Lhf
      CTRL_setRoverL(handle,RhfoverLhf);

      // set the controller proportional gains
      CTRL_setKp(handle,CTRL_Type_PID_Id,Kp);
      CTRL_setKp(handle,CTRL_Type_PID_Iq,Kp);

      // set the Id controller gains
      CTRL_setKi(handle,CTRL_Type_PID_Id,Ki);
      PID_setKi(obj->pidHandle_Id,Ki);

      // set the Iq controller gains
      CTRL_setKi(handle,CTRL_Type_PID_Iq,Ki);
      PID_setKi(obj->pidHandle_Iq,Ki);
    }

  return;
} // end of recalcKpKi() function


void setFeLimitZero(CTRL_Handle handle)
{
  CTRL_Obj *obj = (CTRL_Obj *)handle;
  EST_State_e EstState = EST_getState(obj->estHandle);

  _iq fe_neg_max_pu;
  _iq fe_pos_min_pu;

  if((EST_isMotorIdentified(obj->estHandle) == false) && (CTRL_getMotorType(handle) == MOTOR_Type_Induction))
    {
	  fe_neg_max_pu = _IQ30(0.0);

	  fe_pos_min_pu = _IQ30(0.0);
    }
  else
    {
	  fe_neg_max_pu = _IQ30(-USER_ZEROSPEEDLIMIT);

	  fe_pos_min_pu = _IQ30(USER_ZEROSPEEDLIMIT);
    }

  EST_setFe_neg_max_pu(obj->estHandle, fe_neg_max_pu);

  EST_setFe_pos_min_pu(obj->estHandle, fe_pos_min_pu);

  return;
} // end of setFeLimitZero() function


void acim_Dir_qFmtCalc(CTRL_Handle handle)
{
  CTRL_Obj *obj = (CTRL_Obj *)handle;
  EST_State_e EstState = EST_getState(obj->estHandle);

  if(EstState == EST_State_IdRated)
    {
      EST_setDir_qFmt(obj->estHandle, EST_computeDirection_qFmt(obj->estHandle, 0.7));
    }

  return;
} // end of acim_Dir_qFmtCalc() function



// Control motor running
void motor_RunCtrl(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  bool flag_enableSpeedCtrl;
  HAL_PwmData_t gPwmData;

  obj->motorHandle->Flag_Run_Identify = true;

#ifdef USE_SpinTAC
  if(obj->motorHandle->Flag_UseSpinTAC == true)
  {
	 if(obj->motorHandle->Flag_enableRun)		// Stop to Start
	 {
	   if(STPOSCTL_getEnable(obj->st_obj.posCtlHandle) == false)
	   {
		 STPOSMOVE_setPositionStart_mrev(obj->st_obj.posMoveHandle, STPOSCONV_getPosition_mrev(obj->st_obj.posConvHandle));
	   }
	   // enable the SpinTAC Position Controller
	   STPOSCTL_setEnable(obj->st_obj.posCtlHandle, true);
	   flag_enableSpeedCtrl = false;

	 }
  }
  else
#endif
    {
     if(obj->motorHandle->Flag_enableRun)		// Stop to Start
     {

		if(obj->motorHandle->Flag_RunState == false)
		{

			FS_setFlag_enableFs(obj->fsHandle, obj->motorHandle->Flag_enableFlyingStart);

			FS_reset(obj->fsHandle);

			obj->motorHandle->Flag_RunState = true;

			motor_StopCtrl(obj->ctrlHandle);


			CTRL_setFlag_enableCurrentCtrl(obj->ctrlHandle,true);

			gPwmData.Tabc.value[0] = _IQ(0.0);
			gPwmData.Tabc.value[1] = _IQ(0.0);
			gPwmData.Tabc.value[2] = _IQ(0.0);

			// write the PWM compare values
			HAL_writePwmData(obj->halHandle,&gPwmData);
			// enable the PWM
			HAL_enablePwm(obj->halHandle);
		}

	 flag_enableSpeedCtrl = (obj->motorHandle->Flag_enableSpeedCtrl) & (FS_getFlag_SpeedCtrl(obj->fsHandle));

     }
     else if(obj->motorHandle->Flag_RunState == true)  // Run to Stop
     {

		FS_setFlag_enableFs(obj->fsHandle, false);

		obj->motorHandle->Flag_RunState = false;
		//gmotorHandle->SpeedRef_krpm = _IQ(0.0);
		//BRAKE_setBrakeEnable(obj->brakeHandle, true);

		// disable the PWM
		HAL_disablePwm(obj->halHandle);

		flag_enableSpeedCtrl = false;

		motor_StopCtrl(obj->ctrlHandle);


		gPwmData.Tabc.value[0] = _IQ(0.0);
		gPwmData.Tabc.value[1] = _IQ(0.0);
		gPwmData.Tabc.value[2] = _IQ(0.0);

		CTRL_setFlag_enableCurrentCtrl(obj->ctrlHandle, false);

     }
  }
  // enable/disable the Library internal PI.  Iq is referenced by the speed PI now
  CTRL_setFlag_enableSpeedCtrl(obj->ctrlHandle,flag_enableSpeedCtrl);

  return;
}


void motor_StopCtrl(CTRL_Handle handle)
{
	CTRL_Obj *obj = (CTRL_Obj *)handle;

	PID_setUi(obj->pidHandle_spd, _IQ(0.0));
	PID_setUi(obj->pidHandle_Id, _IQ(0.0));
	PID_setUi(obj->pidHandle_Iq, _IQ(0.0));

	CTRL_setId_ref_pu(handle, _IQ(0.0));
	CTRL_setIq_ref_pu(handle, _IQ(0.0));
	CTRL_setSpd_out_pu(handle, _IQ(0.0));

	return;

}


void PROCTRL_updateKpKiGains(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // set the kp and ki speed values from the watch window
  CTRL_setKp(obj->ctrlHandle,CTRL_Type_PID_spd,obj->motorHandle->Kp_spd);
  CTRL_setKi(obj->ctrlHandle,CTRL_Type_PID_spd,obj->motorHandle->Ki_spd);

  // set the kp and ki current values for Id and Iq from the watch window
  CTRL_setKp(obj->ctrlHandle,CTRL_Type_PID_Id,obj->motorHandle->Kp_Idq);
  CTRL_setKi(obj->ctrlHandle,CTRL_Type_PID_Id,obj->motorHandle->Ki_Idq);
  CTRL_setKp(obj->ctrlHandle,CTRL_Type_PID_Iq,obj->motorHandle->Kp_Idq);
  CTRL_setKi(obj->ctrlHandle,CTRL_Type_PID_Iq,obj->motorHandle->Ki_Idq);

  return;
} // end of updateKpKiGains() function

void PROCTRL_getBoardBias(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // Return the bias value for currents
  obj->motorHandle->I_bias.value[0] = HAL_getBias(obj->halHandle,HAL_SensorType_Current,0);
  obj->motorHandle->I_bias.value[1] = HAL_getBias(obj->halHandle,HAL_SensorType_Current,1);
  obj->motorHandle->I_bias.value[2] = HAL_getBias(obj->halHandle,HAL_SensorType_Current,2);

  // Return the bias value for voltages
  obj->motorHandle->V_bias.value[0] = HAL_getBias(obj->halHandle,HAL_SensorType_Voltage,0);
  obj->motorHandle->V_bias.value[1] = HAL_getBias(obj->halHandle,HAL_SensorType_Voltage,1);
  obj->motorHandle->V_bias.value[2] = HAL_getBias(obj->halHandle,HAL_SensorType_Voltage,2);

return;
}

void PROCTRL_setBoardBias(PROCTRL_Handle handle, const float *Offset)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  // set the current bias
  HAL_setBias(obj->halHandle, HAL_SensorType_Current,0,_IQ(Offset[0])); //A channel current offset
  HAL_setBias(obj->halHandle, HAL_SensorType_Current,1,_IQ(Offset[1])); //B channel current offset
  HAL_setBias(obj->halHandle, HAL_SensorType_Current,2,_IQ(Offset[2])); //C channel current offset

  // set the voltage bias
  HAL_setBias(obj->halHandle, HAL_SensorType_Voltage,0,_IQ(Offset[3])); //A channel voltage offset
  HAL_setBias(obj->halHandle, HAL_SensorType_Voltage,1,_IQ(Offset[4])); //B channel voltage offset
  HAL_setBias(obj->halHandle, HAL_SensorType_Voltage,2,_IQ(Offset[5])); //C channel voltage offset

return;
}

void PROCTRL_getScaleActors(PROCTRL_Handle handle, USER_Params *pUserParams)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // compute scaling factors for flux and torque calculations
  obj->Flux_pu_to_Wb_sf = USER_computeFlux_pu_to_Wb_sf(pUserParams);
  obj->Flux_pu_to_VpHz_sf = USER_computeFlux_pu_to_VpHz_sf(pUserParams);
  obj->Torque_Ls_Id_Iq_pu_to_Nm_sf = USER_computeTorque_Ls_Id_Iq_pu_to_Nm_sf(pUserParams);
  obj->Torque_Flux_Iq_pu_to_Nm_sf = USER_computeTorque_Flux_Iq_pu_to_Nm_sf(pUserParams);

  return;
}


void PROCTRL_chkMotorIdentified(PROCTRL_Handle handle, USER_Params *pUserParams)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  static bool Flag_Latch_softwareUpdate = true;
  static _iq gMaxCurrentSlope = _IQ(0.0);

    if(EST_isMotorIdentified(obj->ctrlHandle->estHandle))
      {
        //_iq Id_squared_pu = _IQmpy(CTRL_getId_ref_pu(obj->ctrlHandle),CTRL_getId_ref_pu(obj->ctrlHandle));


        //Set the maximum current controller output for the Iq and Id current controllers to enable
        //over-modulation.
        //An input into the SVM above 1/SQRT(3) = 0.5774 is in the over-modulation region.  An input of 0.5774 is where
        //the crest of the sinewave touches the 100% duty cycle.  At an input of 2/3, the SVM generator
        //produces a trapezoidal waveform touching every corner of the hexagon
        CTRL_setMaxVsMag_pu(obj->ctrlHandle, obj->motorHandle->OverModulation);

        // set the current ramp
        EST_setMaxCurrentSlope_pu(obj->ctrlHandle->estHandle,gMaxCurrentSlope);
        obj->motorHandle->Flag_MotorIdentified = true;

        // set the speed reference
        CTRL_setSpd_ref_krpm(obj->ctrlHandle, obj->motorHandle->SpeedRef_krpm);

        // set the speed acceleration
        _iq MaxAccel_krpms_sf = _IQ((pUserParams->motor_numPolePairs)*1000.0/USER_TRAJ_FREQ_Hz/USER_IQ_FULL_SCALE_FREQ_Hz/60.0);
        CTRL_setMaxAccel_pu(obj->ctrlHandle,_IQmpy(MaxAccel_krpms_sf, obj->motorHandle->MaxAccel_krpmps));

        // set the Id reference
        //CTRL_setId_ref_pu(obj->ctrlHandle, _IQmpy(obj->motorHandle->IdRef_A, _IQ(1.0/(pUserParams->iqFullScaleCurrent_A))));
#ifdef USE_SpinTAC

        if(EST_getState(obj->ctrlHandle->estHandle) != EST_State_OnLine)
        {
        	// if the system is not running, disable SpinTAC Position Controller
    	    STPOSCTL_setEnable(obj->st_obj.posCtlHandle, false);

		    // If motor is not running, feed the position feedback into SpinTAC Position Move
			STPOSMOVE_setPositionStart_mrev(obj->st_obj.posMoveHandle, STPOSCONV_getPosition_mrev(obj->st_obj.posConvHandle));
        }
#endif
        if(Flag_Latch_softwareUpdate)
        {
          Flag_Latch_softwareUpdate = false;

          USER_calcPIgains(obj->ctrlHandle, pUserParams);

          // initialize the watch window kp and ki current values with pre-calculated values
          obj->motorHandle->Kp_Idq = CTRL_getKp(obj->ctrlHandle,CTRL_Type_PID_Id);
          obj->motorHandle->Ki_Idq = CTRL_getKi(obj->ctrlHandle,CTRL_Type_PID_Id);


          #ifdef USE_SpinTAC
		  // initialize the watch window Bw value with the default value
          obj->motorHandle->SpinTAC.PosCtlBw_radps = STPOSCTL_getBandwidth_radps(obj->st_obj.posCtlHandle);

          // initialize the watch window with maximum and minimum Iq reference
          obj->motorHandle->SpinTAC.PosCtlOutputMax_A = _IQmpy(STPOSCTL_getOutputMaximum(obj->st_obj.posCtlHandle), _IQ(pUserParams->iqFullScaleCurrent_A));
          obj->motorHandle->SpinTAC.PosCtlOutputMin_A = _IQmpy(STPOSCTL_getOutputMinimum(obj->st_obj.posCtlHandle), _IQ(pUserParams->iqFullScaleCurrent_A));
          #endif
        }

      }
    else
      {
        Flag_Latch_softwareUpdate = true;

        // initialize the watch window kp and ki values with pre-calculated values
        obj->motorHandle->Kp_spd = CTRL_getKp(obj->ctrlHandle,CTRL_Type_PID_spd);
        obj->motorHandle->Ki_spd = CTRL_getKi(obj->ctrlHandle,CTRL_Type_PID_spd);

        // the estimator sets the maximum current slope during identification
        gMaxCurrentSlope = EST_getMaxCurrentSlope_pu(obj->ctrlHandle->estHandle);

      }




  return;
}

void PROCTRL_chkError(PROCTRL_Handle handle, USER_Params *pUserParams)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  if(CTRL_isError(obj->ctrlHandle))
  {
	// set the enable controller flag to false
	CTRL_setFlag_enableCtrl(obj->ctrlHandle,false);

	// set the enable system flag to false
	obj->motorHandle->Flag_enableSys = false;

	// disable the PWM
	HAL_disablePwm(obj->halHandle);
  }
  else
  {
	// update the controller state
	bool flag_ctrlStateChanged = CTRL_updateState(obj->ctrlHandle);

	// enable or disable the control
	CTRL_setFlag_enableCtrl(obj->ctrlHandle, obj->motorHandle->Flag_Run_Identify);

	if(flag_ctrlStateChanged)
	  {
		CTRL_State_e ctrlState = CTRL_getState(obj->ctrlHandle);

		if(ctrlState == CTRL_State_OffLine)
		  {
			// enable the PWM
			HAL_enablePwm(obj->halHandle);
		  }
		else if(ctrlState == CTRL_State_OnLine)
		  {
			if(obj->motorHandle->Flag_enableOffsetcalc == true)
			{
			  // update the ADC bias values
			  HAL_updateAdcBias(obj->halHandle);
			}
			else
			{
			  PROCTRL_setBoardBias(handle, DE5_Board_Bias);
			}

			PROCTRL_getBoardBias(handle);

			// enable the PWM
			HAL_enablePwm(obj->halHandle);
		  }
		else if(ctrlState == CTRL_State_Idle)
		  {
			// disable the PWM
			HAL_disablePwm(obj->halHandle);
			obj->motorHandle->Flag_Run_Identify = false;
		  }

		if((CTRL_getFlag_enableUserMotorParams(obj->ctrlHandle) == true) &&
		  (ctrlState > CTRL_State_Idle) &&
		  (obj->motorHandle->CtrlVersion.minor == 6))
		  {
			// call this function to fix 1p6
			USER_softwareUpdate1p6(obj->ctrlHandle, pUserParams);
		  }
	  }
  }

  return;
}


void PROCTRL_getPortData(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

 if(obj->Ext_Int_Flag)
  {
   obj->Ext_Int_Flag = false;

#ifndef TMS320F28069
   //PCA955x_GetStatus(obj->halHandle->pca955xHandle,PCA955x_PortNum_Port1);
#endif

  }

  return;

}


void PROCTRL_getSensorData(PROCTRL_Handle handle, const HAL_AdcData_t *pAdcData)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  const _iq Kalman_Q = 250;
  const _iq Kalman_R = 2000;
  static _iq p_Last0 = 0;
  static _iq p_Last1 = 0;

  _iq x_Mid;
  _iq p_Mid;
  _iq InputData;
  _iq x_Last;
  _iq Kg_pu;

  //======= Sensor 1 =======
  x_Mid = obj->motorHandle->Sensor0_Value;
  p_Mid = p_Last0 + Kalman_Q;
  InputData = pAdcData->analogSensor1;

  Kg_pu = _IQdiv(p_Mid, (p_Mid + Kalman_R));

  x_Last = x_Mid + _IQmpy(Kg_pu, (InputData - x_Mid));

  p_Last0 = p_Mid - _IQmpy(Kg_pu, p_Mid);

  obj->motorHandle->Sensor0_Value = x_Last;

  //======= Sensor 1 =======
  x_Mid = obj->motorHandle->Sensor1_Value;
  p_Mid = p_Last1 + Kalman_Q;
  InputData = pAdcData->analogSensor2;

  Kg_pu = _IQdiv(p_Mid, (p_Mid + Kalman_R));

  x_Last = x_Mid + _IQmpy(Kg_pu, (InputData - x_Mid));

  p_Last1 = p_Mid - _IQmpy(Kg_pu, p_Mid);

  obj->motorHandle->Sensor1_Value = x_Last;

  return;
}


void PROCTRL_MainLoop(PROCTRL_Handle handle, USER_Params *pUserParams)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;


 PROCTRL_chkError(handle, pUserParams);
 PROCTRL_chkMotorIdentified(handle, pUserParams);

 PROCTRL_UpdateMotorSpeed(handle);
 PROCTRL_UpdateMotorTorque(handle);
 PROCTRL_Update_Est_State(handle);
 PROCTRL_UpdateMotorVar(handle);

#ifdef USE_SpinTAC
 PROCTRL_UpdateSpinTAC(handle);

#endif

 if(MOTOR_getFlag_MotorParamsEst(obj->motorHandle))
 {
 // recalculate Kp and Ki gains to fix the R/L limitation of 2000.0, and Kp limit to 0.11
 recalcKpKi(obj->ctrlHandle, pUserParams);

 if(CTRL_getMotorType(obj->ctrlHandle) == MOTOR_Type_Induction)
   {
     // set electrical frequency limit to zero while identifying an induction motor
     setFeLimitZero(obj->ctrlHandle);

     // calculate Dir_qFmt for acim motors
     acim_Dir_qFmtCalc(obj->ctrlHandle);
   }
 }
 else
 {
   motor_RunCtrl(handle);
   FSM_Run(obj->fsmHandle);

   // update Kp and Ki gains
   PROCTRL_updateKpKiGains(handle);

#ifndef FAST_ROM_V1p6
 //PROCTRL_getAbsAngle_mech(handle);
 //PROCTRL_getMotorTurns_mech(handle);
 //PROCTRL_getPortData(handle);


 if(obj->motorHandle->Flag_enableSpeedCtrl == false)
 {PROCTRL_UpdateIqRef(handle);}

 PROCTRL_setDcBrakeEnable(handle);


#endif
 }


#ifdef USE_SpinTAC
 // set the SpinTAC (ST) bandwidth scale
 STPOSCTL_setBandwidth_radps(obj->st_obj.posCtlHandle, obj->motorHandle->SpinTAC.PosCtlBw_radps);

 // set the maximum and minimum values for Iq reference
 STPOSCTL_setOutputMaximums(obj->st_obj.posCtlHandle, _IQmpy(obj->motorHandle->SpinTAC.PosCtlOutputMax_A, _IQ(1.0/USER_IQ_FULL_SCALE_CURRENT_A)), _IQmpy(obj->motorHandle->SpinTAC.PosCtlOutputMin_A, _IQ(1.0/USER_IQ_FULL_SCALE_CURRENT_A)));
#endif


 // enable/disable the forced angle
 EST_setFlag_enableForceAngle(obj->ctrlHandle->estHandle,obj->motorHandle->Flag_enableForceAngle);

 // enable or disable power warp
 CTRL_setFlag_enablePowerWarp(obj->ctrlHandle,obj->motorHandle->Flag_enablePowerWarp);

  return;
}


void PROCTRL_UpdateMotorSpeed (PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;


#ifdef USE_SpinTAC
  ST_Obj *stObj = (ST_Obj *)(obj->stHandle);
  // get the speed estimate
  obj->motorHandle->Speed_krpm = _IQmpy(STPOSCONV_getVelocityFiltered(stObj->posConvHandle), _IQ(ST_SPEED_KRPM_PER_PU));

#else
  // get the speed estimate
  obj->motorHandle->Speed_krpm = EST_getSpeed_krpm(obj->ctrlHandle->estHandle);
#endif

  return;
}

void PROCTRL_UpdateMotorTorque(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // get the torque estimate
  obj->motorHandle->Torque_Nm = USER_computeTorque_Nm(obj->ctrlHandle, obj->Torque_Flux_Iq_pu_to_Nm_sf, obj->Torque_Ls_Id_Iq_pu_to_Nm_sf);

  return;
}

void PROCTRL_UpdateMotorVar(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  // get the magnetizing current
  obj->motorHandle->MagnCurr_A = EST_getIdRated(obj->ctrlHandle->estHandle);

  // get the rotor resistance
  obj->motorHandle->Rr_Ohm = EST_getRr_Ohm(obj->ctrlHandle->estHandle);

  // get the online stator resistance
  //obj->motorHandle->RsOnLine_Ohm = EST_getRsOnLine_Ohm(obj->ctrlHandle->estHandle);

  // get the stator resistance
  obj->motorHandle->Rs_Ohm = EST_getRs_Ohm(obj->ctrlHandle->estHandle);

  // get the stator inductance in the direct coordinate direction
  obj->motorHandle->Lsd_H = EST_getLs_d_H(obj->ctrlHandle->estHandle);

  // get the stator inductance in the quadrature coordinate direction
  obj->motorHandle->Lsq_H = EST_getLs_q_H(obj->ctrlHandle->estHandle);

  // get the flux in V/Hz in floating point
  obj->motorHandle->Flux_VpHz = EST_getFlux_VpHz(obj->ctrlHandle->estHandle);

  // get the flux in Wb in fixed point
  obj->motorHandle->Flux_Wb = USER_computeFlux(obj->ctrlHandle, obj->Flux_pu_to_Wb_sf);

  return;

}

void PROCTRL_Update_Est_State(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // get the controller state
  obj->motorHandle->CtrlState = CTRL_getState(obj->ctrlHandle);

  // get the estimator state
  obj->motorHandle->EstState = EST_getState(obj->ctrlHandle->estHandle);

  return;
}

void PROCTRL_UpdateCurrentAmpVar(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // read Id and Iq vectors in amps
  obj->motorHandle->Id_A = _IQmpy(CTRL_getId_in_pu(obj->ctrlHandle), _IQ(obj->pUserParams->iqFullScaleCurrent_A));
  obj->motorHandle->Iq_A = _IQmpy(CTRL_getIq_in_pu(obj->ctrlHandle), _IQ(obj->pUserParams->iqFullScaleCurrent_A));

  // calculate vector Is in amps
  obj->motorHandle->Is_A = _IQsqrt(_IQmpy(obj->motorHandle->Id_A, obj->motorHandle->Id_A) + _IQmpy(obj->motorHandle->Iq_A, obj->motorHandle->Iq_A));
}

void PROCTRL_UpdateVoltageVar(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  // read Vd and Vq vectors per units
  obj->motorHandle->Vd = CTRL_getVd_out_pu(obj->ctrlHandle);
  obj->motorHandle->Vq = CTRL_getVq_out_pu(obj->ctrlHandle);

  // calculate vector Vs in per units
  obj->motorHandle->Vs = _IQsqrt(_IQmpy(obj->motorHandle->Vd, obj->motorHandle->Vd) + _IQmpy(obj->motorHandle->Vq, obj->motorHandle->Vq));

  return;
} // end of PROCTRL_UpdateVoltageVar() function


void PROCTRL_UpdateIqRef(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  _iq iq_ref = _IQmpy(obj->motorHandle->IqRef_A, _IQ(1.0/(obj->pUserParams->iqFullScaleCurrent_A)));

  // set the speed reference so that the forced angle rotates in the correct direction for startup
  if(_IQabs(obj->motorHandle->Speed_krpm) < _IQ(0.01))
    {
      if(iq_ref < _IQ(0.0))
        {
          CTRL_setSpd_ref_krpm(obj->ctrlHandle,_IQ(-0.01));
        }
      else if(iq_ref > _IQ(0.0))
        {
          CTRL_setSpd_ref_krpm(obj->ctrlHandle,_IQ(0.01));
        }
    }

  // Set the Iq reference that use to come out of the PI speed control
  CTRL_setIq_ref_pu(obj->ctrlHandle, iq_ref);

  return;
} // end of updateIqRef() function


void PROCTRL_getDCbusVoltage(PROCTRL_Handle handle, HAL_AdcData_t *adcData)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  static _iq Avage = 0x04000000;
  static _iq Sum = 0x40000000;

  // Get the DC buss voltage
  Sum +=  _IQmpy(adcData->dcBus,_IQ(USER_IQ_FULL_SCALE_VOLTAGE_V/1000.0));
  Sum -= Avage;
  Avage = Sum >> 2;

  obj->motorHandle->VdcBus_kV = Avage;

  return;
}

void PROCTRL_getChipTemperture(PROCTRL_Handle handle, HAL_AdcData_t *adcData)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  static _iq Avage = 0x00002000;
  static _iq Sum = 0x00008000;
  _iq20 NTC_Temp;
  float Offset;

  Sum += adcData->igbtNTC;
  Sum -= Avage;
  Avage = Sum >> 2;

  Offset = 3572.0 - (float)Avage;
  NTC_Temp = (_IQ19mpy(_IQ19(0.0322), _IQ19(Offset))) << 1;
  NTC_Temp += _IQ20(30.0);
  obj->motorHandle->ChipTemp = NTC_Temp;

  return;
}


void PROCTRL_setDcBrakeEnable(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  if(obj->fsmHandle->Flag_DcBrake == true)
  {
	BRAKE_setBrakeEnable(obj->ctrlHandle->brakeHandle, true);
  }
  else
  {
	BRAKE_setBrakeEnable(obj->ctrlHandle->brakeHandle, false);
  }
  return;
}

void PROCTRL_setDcBrakeCurrent(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  _iq Ibrake_pu;
  _iq IdRated_pu;

  IdRated_pu = _IQ((obj->pUserParams->IdRated)/(obj->pUserParams->iqFullScaleCurrent_A));

  Ibrake_pu = _IQmpy(obj->motorHandle->Ibrake_Ratio, IdRated_pu);

  BRAKE_setId_ref_pu(obj->ctrlHandle->brakeHandle, Ibrake_pu);

  return;
}



#ifdef USE_SpinTAC

void ST_runPosConv(PROCTRL_Handle handle)
{
	PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
	ST_Obj *stObj = (ST_Obj *)(obj->stHandle);

	// get the electrical angle from the ENC module
    STPOSCONV_setElecAngle_erev(stObj->posConvHandle, ENC_getElecAngle(obj->encHandle));

    if(CTRL_getMotorType(obj->ctrlHandle) ==  MOTOR_Type_Induction) {
      // The CurrentVector feedback is only needed for ACIM
      // get the vector of the direct/quadrature current input vector values from CTRL
      STPOSCONV_setCurrentVector(stObj->posConvHandle, CTRL_getIdq_in_addr(obj->ctrlHandle));
    }

	// run the SpinTAC Position Converter
	STPOSCONV_run(stObj->posConvHandle);

	if(CTRL_getMotorType(obj->ctrlHandle) ==  MOTOR_Type_Induction) {
	  // The Slip Velocity is only needed for ACIM
	  // update the slip velocity in electrical angle per second, Q24
	  SLIP_setSlipVelocity(obj->slipHandle, STPOSCONV_getSlipVelocity(stObj->posConvHandle));
	}
}

void ST_runPosCtl(ST_Handle handle, CTRL_Handle ctrlHandle)
{
	ST_Obj *stObj = (ST_Obj *)handle;

	// provide the updated references to the SpinTAC Position Control
	STPOSCTL_setPositionReference_mrev(stObj->posCtlHandle, STPOSMOVE_getPositionReference_mrev(stObj->posMoveHandle));
	STPOSCTL_setVelocityReference(stObj->posCtlHandle, STPOSMOVE_getVelocityReference(stObj->posMoveHandle));
	STPOSCTL_setAccelerationReference(stObj->posCtlHandle, STPOSMOVE_getAccelerationReference(stObj->posMoveHandle));
	// provide the feedback to the SpinTAC Position Control
	STPOSCTL_setPositionFeedback_mrev(stObj->posCtlHandle, STPOSCONV_getPosition_mrev(stObj->posConvHandle));

	// Run SpinTAC Position Control
	STPOSCTL_run(stObj->posCtlHandle);

	// Provide SpinTAC Position Control Torque Output to the FOC
	CTRL_setIq_ref_pu(ctrlHandle, STPOSCTL_getTorqueReference(stObj->posCtlHandle));
}

void ST_runPosMove(PROCTRL_Handle handle)
{
	PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
	ST_Obj *stObj = (ST_Obj *)(obj->stHandle);

	STPOSMOVE_run(stObj->posMoveHandle);
}

void PROCTRL_UpdateSpinTAC(PROCTRL_Handle handle)
{
  uint16_t stPosPlanCfgErrIdx, stPosPlanCfgErrCode;
  uint32_t ProTime_tick, ProTime_mtick;
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;
  ST_Obj *stObj = (ST_Obj *)(obj->stHandle);

  // get the position error
  obj->motorHandle->PositionError_MRev = STPOSCTL_getPositionError_mrev(stObj->posCtlHandle);
  // gets the Position Controller status
  obj->motorHandle->SpinTAC.PosCtlStatus = STPOSCTL_getStatus(stObj->posCtlHandle);

  // get the inertia setting
  obj->motorHandle->SpinTAC.InertiaEstimate_Aperkrpm = _IQmpy(STPOSCTL_getInertia(stObj->posCtlHandle), _IQ(ST_SPEED_PU_PER_KRPM * USER_IQ_FULL_SCALE_CURRENT_A));

  // get the friction setting
  obj->motorHandle->SpinTAC.FrictionEstimate_Aperkrpm = _IQmpy(STPOSCTL_getFriction(stObj->posCtlHandle), _IQ(ST_SPEED_PU_PER_KRPM * USER_IQ_FULL_SCALE_CURRENT_A));

  // get the Position Controller error
  obj->motorHandle->SpinTAC.PosCtlErrorID = STPOSCTL_getErrorID(stObj->posCtlHandle);

  // get the Position Move status
  obj->motorHandle->SpinTAC.PosMoveStatus = STPOSMOVE_getStatus(stObj->posMoveHandle);

  // get the Position Move profile time
  STPOSMOVE_getProfileTime_tick(stObj->posMoveHandle, &ProTime_tick, &ProTime_mtick);
  obj->motorHandle->SpinTAC.PosMoveTime_ticks = ProTime_tick;
  obj->motorHandle->SpinTAC.PosMoveTime_mticks = ProTime_mtick;

  // get the Position Move error
  obj->motorHandle->SpinTAC.PosMoveErrorID = STPOSMOVE_getErrorID(stObj->posMoveHandle);

  // get the Position Plan status
  obj->motorHandle->SpinTAC.PosPlanStatus = STPOSPLAN_getStatus(stObj->posPlanHandle);

  // get the Position Plan error
  obj->motorHandle->SpinTAC.PosPlanErrorID = STPOSPLAN_getCfgError(stObj->posPlanHandle, &stPosPlanCfgErrIdx, &stPosPlanCfgErrCode);
  obj->motorHandle->SpinTAC.PosPlanCfgErrorIdx = stPosPlanCfgErrIdx;
  obj->motorHandle->SpinTAC.PosPlanCfgErrorCode = stPosPlanCfgErrCode;

  // get the Position Converter error
  obj->motorHandle->SpinTAC.PosConvErrorID = STPOSCONV_getErrorID(stObj->posConvHandle);


  return;

}




#endif



void PROCTRL_CheckMotorError(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  if(obj->motorHandle->UserErrorCode != USER_ErrorCode_NoError)
	{
	  obj->motorHandle->Flag_enableSys = false;
	}

  return;
}

void PROCTRL_CheckRelayOnFlag(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  if(HAL_readGpio(halHandle, (GPIO_Number_e)HAL_Gpio_RelayOnFlag_b))
  {
	  obj->motorHandle->Flag_enableSys = false;
  }

  return;
}




/*
void PROCTRL_getAbsAngle_mech(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  const _iq Kalman_Q = _IQ(0.02);
  const _iq Kalman_R = _IQ(0.5);
  static _iq p_Last0 = 0;

  _iq AbsAngle_mech_Current;

  _iq x_Mid;
  _iq p_Mid;
  _iq InputData;

  float Kg;

  x_Mid = obj->motorHandle->AbsAngle_mech;
  p_Mid = p_Last0 + Kalman_Q;
  InputData = obj->ctrlHandle->AbsAngle_mech_pu;

  Kg = (1.0 * p_Mid)/(p_Mid + Kalman_R);

  if(InputData > x_Mid)
    AbsAngle_mech_Current = x_Mid + (_iq)(Kg * (InputData - x_Mid));
  else
    AbsAngle_mech_Current = x_Mid - (_iq)(Kg * (x_Mid - InputData));

  p_Last0 = p_Mid - (_iq)(Kg * p_Mid);

  obj->motorHandle->AbsAngle_mech = AbsAngle_mech_Current;

  return;
}
*/

/*
void PROCTRL_getMotorTurns_mech(PROCTRL_Handle handle)
{
  PROCTRL_Obj *obj = (PROCTRL_Obj *)handle;

  obj->motorHandle->Turns_mech = CTRL_getCycleMech_cnt(obj->ctrlHandle);

  return;
}
*/

//=========================================== End of File =========================================



